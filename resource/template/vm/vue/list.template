<template>
{{$structName := .table.StructName | CaseCamel}}
{{$businessName := .table.BusinessName | CaseCamelLower}}
  <div class="app-container">
    <el-form :model="queryParams" ref="queryRef" :inline="true" v-show="showSearch" label-width="68px">
      {{range $index, $field := .table.Fields}}
      {{if eq $field.IsQuery "1"}}
      
      {{if eq $field.HtmlType "input" "textarea"}}
      <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
        <el-input
          v-model="queryParams.{{$field.HtmlField}}"
          placeholder="请输入{{$field.ColumnComment}}"
          clearable
          style="width: 240px"
          @keyup.enter="handleQuery"
        />
      </el-form-item>
      {{else if and (eq $field.HtmlType "select" "radio" "checkbox") (ne $field.DictType "") }}
      <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
        <el-select v-model="queryParams.{{$field.HtmlField}}" placeholder="{{$field.ColumnComment}}" clearable>
          <el-option
            v-for="dict in {{$field.DictType}}"
            :key="dict.value"
            :label="dict.label"
            :value="dict.value"
          />
        </el-select>
      </el-form-item>
      {{else if eq $field.HtmlType "datetime"}}
      <el-form-item label="{{$field.ColumnComment}}" style="width: 308px;">
        <el-date-picker
            v-model="dateRange"
            value-format="YYYY-MM-DD"
            type="daterange"
            range-separator="-"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
        ></el-date-picker>
      </el-form-item>
      {{else}}
      <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
        <el-select v-model="queryParams.{{$field.HtmlField}}" placeholder="请选择{{$field.ColumnComment}}" clearable>
          <el-option label="请选择字典生成" value="" />
        </el-select>
      </el-form-item>
      {{end}}

      {{end}}
      {{end}}
      <el-form-item>
        <el-button type="primary" icon="Search" @click="handleQuery">搜索</el-button>
        <el-button icon="Refresh" @click="resetQuery">重置</el-button>
      </el-form-item>
    </el-form>

    <el-row :gutter="10" class="mb8">
      <el-col :span="1.5">
        <el-button
          type="primary"
          plain
          icon="Plus"
          @click="handleAdd"
          v-hasPermi="['{{.table.ModuleName}}/{{$businessName}}/create']"
        >新增</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="success"
          plain
          icon="Edit"
          :disabled="single"
          @click="handleUpdate"
          v-hasPermi="['{{.table.ModuleName}}/{{$businessName}}/update']"
        >修改</el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="danger"
          plain
          icon="Delete"
          :disabled="multiple"
          @click="handleDelete"
          v-hasPermi="['{{.table.ModuleName}}/{{$businessName}}/delete']"
        >删除</el-button>
      </el-col>
      <right-toolbar v-model:showSearch="showSearch" @queryTable="getList"></right-toolbar>
    </el-row>

    <!-- 表格展示 -->
    <el-table v-loading="loading" :data="{{$businessName}}List" @selection-change="handleSelectionChange">
      <el-table-column type="selection" width="55" align="center" />
      {{range $index, $field := .table.Fields}}
      {{if and (eq $field.IsList "1") (eq $field.IsPk "1")}}
      <el-table-column label="{{$field.ColumnComment}}" align="center" prop="{{$field.HtmlField}}" />
      {{else if and (eq $field.IsList "1") (eq $field.HtmlType "datetime")}}
      <el-table-column label="{{$field.ColumnComment}}" align="center" prop="{{$field.HtmlField}}" width="180">
        <template #default="scope">
          <span>{{VueTag "{{" }} parseTime(scope.row.{{$field.HtmlField}}) {{VueTag "}}"}}</span>
        </template>
      </el-table-column>
      {{else if and (eq $field.IsList "1") (eq $field.HtmlType "select")}}
      <el-table-column label="{{$field.ColumnComment}}" align="center" prop="{{$field.HtmlField}}">
        <template #default="scope">
          <dict-tag :options="{{$field.DictType}}" :value="scope.row.{{$field.HtmlField}}" />
        </template>
      </el-table-column>
      {{else }}
      <el-table-column label="{{$field.ColumnComment}}" align="center" prop="{{$field.HtmlField}}" :show-overflow-tooltip="true" />
      {{end}}
      {{end}}
      <el-table-column label="操作" align="center" width="150" class-name="small-padding fixed-width">
        <template #default="scope">
          <el-button
            type="text"
            icon="Edit"
            @click="handleUpdate(scope.row)"
            v-hasPermi="['{{.table.ModuleName}}/{{$businessName}}/update']"
          >修改</el-button>
          <el-button
            type="text"
            icon="Delete"
            @click="handleDelete(scope.row)"
            v-hasPermi="['{{.table.ModuleName}}/{{$businessName}}/delete']"
          >删除</el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      v-show="total > 0"
      :total="total"
      v-model:page="queryParams.pageNum"
      v-model:limit="queryParams.pageSize"
      @pagination="getList"
    />

    <!-- 添加或修改配置对话框 -->
    <el-dialog :title="title" v-model="open" width="500px" append-to-body>
      <el-form ref="{{$businessName}}Ref" :model="form" :rules="rules" label-width="80px">

      {{range $index, $field := .table.Fields}}
      {{if and (eq $field.IsInsert "1") (ne $field.IsPk "1")}}
        {{if eq $field.HtmlType "input"}}
        <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
          <el-input v-model="form.{{$field.HtmlField}}" placeholder="请输入{{$field.ColumnComment}}" />
        </el-form-item>
        {{else if eq $field.HtmlType "textarea"}}
        <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
          <el-input v-model="form.{{$field.HtmlField}}" type="textarea" placeholder="请输入{{$field.ColumnComment}}" />
        </el-form-item>
        {{else if eq $field.HtmlType "select"}}
        {{if $field.DictType}}
        <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
          <el-radio-group v-model="form.{{$field.HtmlField}}">
            <el-radio
              v-for="dict in {{$field.DictType}}"
              :key="dict.value"
              :label="dict.value"
            >{{ VueTag "{{" }} dict.label {{ VueTag "}}" }}</el-radio>
          </el-radio-group>
        </el-form-item>
        {{else}}
        <el-form-item label="{{$field.ColumnComment}}" prop="{{$field.HtmlField}}">
          <el-radio-group v-model="form.{{$field.HtmlField}}">
            <el-radio
              v-for="dict in {{$field.DictType}}"
              :key="dict.value"
              :label="dict.value"
            >{{ VueTag "{{" }} dict.label {{ VueTag "}}" }}</el-radio>
          </el-radio-group>
        </el-form-item>
        {{end}}
        
        {{else if eq $field.HtmlType "radio"}}

        {{else if eq $field.HtmlType "checkbox"}}

        {{else if eq $field.HtmlType "datetime"}}

        {{else }}
      {{else }}
      
      {{end}}
      {{end}}

        
        
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button type="primary" @click="submitForm">确 定</el-button>
          <el-button @click="cancel">取 消</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script setup name="{{$structName}}">
import { list{{$structName}}, get{{$structName}}, del{{$structName}}, add{{$structName}}, update{{$structName}} } from "@/api/{{.table.ModuleName}}/{{$businessName}}.js";

const { proxy } = getCurrentInstance();
{{range $index, $field := .table.Fields}}
{{if $field.DictType}}
const { {{$field.DictType}} } = proxy.useDict("{{$field.DictType}}");
{{end}}
{{end}}


const configList = ref([]);
const open = ref(false);
const loading = ref(true);
const showSearch = ref(true);
const ids = ref([]);
const single = ref(true);
const multiple = ref(true);
const total = ref(0);
const title = ref("");
const dateRange = ref([]);

const data = reactive({
  form: {},
  queryParams: {
    pageNum: 1,
    pageSize: 10,
    configName: undefined,
    configKey: undefined,
    configType: undefined
  },
  rules: {
    configName: [{ required: true, message: "参数名称不能为空", trigger: "blur" }],
    configKey: [{ required: true, message: "参数键名不能为空", trigger: "blur" }],
    configValue: [{ required: true, message: "参数键值不能为空", trigger: "blur" }]
  }
});

const { queryParams, form, rules } = toRefs(data);

/** 查询参数列表 */
function getList() {
  loading.value = true;
  listConfig(proxy.addDateRange(queryParams.value, dateRange.value)).then(response => {
    configList.value = response.data.rows;
    total.value = response.data.total;
    loading.value = false;
  });
}
/** 取消按钮 */
function cancel() {
  open.value = false;
  reset();
}
/** 表单重置 */
function reset() {
  form.value = {
    configId: undefined,
    configName: undefined,
    configKey: undefined,
    configValue: undefined,
    configType: "Y",
    remark: undefined
  };
  proxy.resetForm("configRef");
}
/** 搜索按钮操作 */
function handleQuery() {
  queryParams.value.pageNum = 1;
  getList();
}
/** 重置按钮操作 */
function resetQuery() {
  dateRange.value = [];
  proxy.resetForm("queryRef");
  handleQuery();
}
/** 多选框选中数据 */
function handleSelectionChange(selection) {
  ids.value = selection.map(item => item.configId);
  single.value = selection.length != 1;
  multiple.value = !selection.length;
}
/** 新增按钮操作 */
function handleAdd() {
  reset();
  open.value = true;
  title.value = "添加参数";
}
/** 修改按钮操作 */
function handleUpdate(row) {
  reset();
  const configId = row.configId || ids.value;
  getConfig(configId).then(response => {
    form.value = response.data;
    open.value = true;
    title.value = "修改参数";
  });
}
/** 提交按钮 */
function submitForm() {
  proxy.$refs["configRef"].validate(valid => {
    if (valid) {
      if (form.value.configId != undefined) {
        updateConfig(form.value).then(response => {
        proxy.$modal.msgSuccess("修改成功");
        open.value = false;
        getList();
        });
      } else {
        addConfig(form.value).then(response => {
        proxy.$modal.msgSuccess("新增成功");
        open.value = false;
        getList();
        });
      }
    }
  });
}
/** 删除按钮操作 */
function handleDelete(row) {
  const configIds = row.configId || ids.value;
  proxy.$modal.confirm('是否确认删除参数编号为"' + configIds + '"的数据项？').then(function () {
    return delConfig(configIds);
  }).then(() => {
    getList();
    proxy.$modal.msgSuccess("删除成功");
  }).catch(() => {});
}

getList();
</script>
