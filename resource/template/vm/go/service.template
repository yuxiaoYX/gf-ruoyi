// ==========================================================================
// 自动生成控制器相关代码，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{date "Y-m-d H:i:s"}}
// ==========================================================================
////
{{$structName := .table.StructName | CaseCamel}}

package controller

import (
    "context"
    "errors"
    "{{ProjectName}}/internal/model"
    "{{ProjectName}}/internal/service/internal/dao"
    "time"

    "github.com/gogf/gf/v2/frame/g"
    "github.com/gogf/gf/v2/text/gstr"
)

type s{{$structName}} struct{}

// {{.table.Description}}管理服务
func {{$structName}}() *s{{$structName}} {
    return &sConfig{}
}

// 获取{{.table.Description}}列表
func (s *s{{$structName}}) GetList(ctx context.Context, in model.{{$structName}}ListInput) (out model.{{$structName}}ListOutput, err error) {
    m := dao.{{$structName}}.Ctx(ctx).OmitEmpty().Where(g.Map{
        {{range $index, $field := .table.Fields}}
        {{if eq $field.IsQuery "1"}}
        "{{$field.ColumnName}}":  in.{{$field.GoField}},
        {{end}}
        {{end}}
    })
    {{range $index, $field := .table.Fields}}
    {{if eq $column.QueryType "EQ"}}
        m = m.Where(in.{{$field.GoField}})
    {{else}}
        {{if eq $column.QueryType "NE"}}
        if in.{{$column.GoField}} != "" {
            m = m.Where(in.{{$field.GoField}})
        }
        {{else if (eq $column.GoType "Time")}}

        {{else if (eq $column.GoType "Time")}}

        {{else if (eq $column.GoType "Time")}}

        {{else if (eq $column.GoType "Time")}}

        {{else if (eq $column.GoType "Time")}}
        {{end}}


    {{end}}


    {{if eq $field.GoField "CreatedAt"}}
    if in.BeginTime != "" && in.EndTime != "" {
        m = m.Where("created_at>? and created_at<?", in.BeginTime, in.EndTime)
    }
    {{end}}
    {{end}}
    if err = m.Page(in.PageNum, in.PageSize).Scan(&out.Rows); err != nil {
        return
    }
    out.Total, err = m.Count()
    return
}

// 获取{{.table.Description}}详细信息
func (s *s{{$structName}}) GetOne(ctx context.Context, in model.{{$structName}}OneInput) (out *model.{{$structName}}OneOutput, err error) {
    err = dao.{{$structName}}.Ctx(ctx).OmitEmpty().Where(in).Scan(&out)
    return
}

// 新增{{.table.Description}}
func (s *s{{$structName}}) Create(ctx context.Context, in model.{{$structName}}CreateInput) (err error) {
    count, err := dao.{{$structName}}.Ctx(ctx).Where(
        {{range $index, $field := .table.Fields}}
        {{if eq $field.IsPk "1"}}
        {{$field.GoField}},
        {{end}}
        {{end}}
    ).Count()
    if err != nil {
        return err
    }
    if count > 0 {
        return errors.New("{{.table.Description}}主键已存在！")
    }
    _, err = dao.{{$structName}}.Ctx(ctx).Insert(in)
    return
}

// 更新{{.table.Description}}
func (s *s{{$structName}}) Update(ctx context.Context, in model.{{$structName}}UpdateInput) (err error) {
    _, err = dao.{{$structName}}.Ctx(ctx).OmitEmpty().Data(in).Where(
        {{range $index, $field := .table.Fields}}
        {{if eq $field.IsPk "1"}}
        in.{{$field.GoField}},
        {{end}}
        {{end}}
    ).Update()
    return
}

// 删除{{.table.Description}}
func (s *s{{$structName}}) Delete(ctx context.Context, in model.{{$structName}}DeleteInput) (err error) {
    {{range $index, $field := .table.Fields}}
    {{if eq $field.IsPk "1"}}
    {{$field.HtmlField}}List := gstr.Split(in.{{$field.GoField}}Str, ",")
    for _, v := range {{$field.HtmlField}}List {
        if _, err = dao.{{$structName}}.Ctx(ctx).Delete(in.{{$field.GoField}}); err != nil {
            return
        }
    }
    {{end}}
    {{end}}
    return
}