// ==========================================================================
// 自动生成控制器相关代码，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{date "Y-m-d H:i:s"}}
// ==========================================================================
////
{{$structName := .table.StructName | CaseCamel}}
{{$abbreviation := .table.Abbreviation | CaseCamelLower}}

package controller

import (
    "context"
    {{.table.ApiFile}} "{{ProjectName}}/api/{{.table.ApiFile}}"
    "{{ProjectName}}/internal/model"
    "{{ProjectName}}/internal/service"

    "github.com/gogf/gf/v2/util/gconv"
)

// {{.table.Description}}管理
var {{$structName}} = c{{$structName}}{}

type c{{$structName}} struct{}

// 分页获取{{.table.Description}}列表
func (c *c{{$structName}}) GetList(ctx context.Context, req *{{.table.ApiFile}}.{{$structName}}ListReq) (res *{{.table.ApiFile}}.{{$structName}}ListRes, err error) {
    {{$abbreviation}}Res, err :=service.{{$structName}}().GetList(ctx,model.{{$structName}}ListInput{
    {{range $index, $field := .table.Fields}}
    {{if eq $field.IsQuery "1"}}
    {{$field.GoField}}: req.{{$field.GoField}},
    {{end}}
    {{if eq $field.GoField "CreatedAt"}}
    BeginTime: req.BeginTime,
    EndTime: req.EndTime,
    {{end}}
    {{end}}
    PageNum:  req.PageNum,
    PageSize: req.PageSize,
    })
    gconv.Scan({{$abbreviation}}Res, &res)
    return
}

// 获取单个{{.table.Description}}信息
func (c *c{{$structName}}) GetOne(ctx context.Context, req *{{.table.ApiFile}}.{{$structName}}OneReq) (res *{{.table.ApiFile}}.{{$structName}}OneRes, err error) {
    $abbreviation}}Res, err := service.{{$structName}}().GetOne(ctx, model.{{$structName}}OneInput{
        {{range $index, $field := .table.Fields}}
        {{if eq $field.IsPk "1"}}
        {{$field.GoField}}: req.{{$field.GoField}},
        {{end}}
        {{end}}
    })
    gconv.Scan($abbreviation}}Res, &res)
    return
}

// 新建{{.table.Description}}
func (c *c{{$structName}}) Create(ctx context.Context, req *{{.table.ApiFile}}.{{$structName}}CreateReq) (res *{{.table.ApiFile}}.{{$structName}}CreateRes, err error) {
    err = service.{{$structName}}().Create(ctx, model.SysUserCreateInput{
        {{range $index, $field := .table.Fields}}
        {{if and (eq $field.IsInsert "1") (ne $field.IsIncrement "1")}}
        {{$field.GoField}}: req.{{$field.GoField}},
        {{end}}
        {{end}}
    })
    return
}

// 更新{{.table.Description}}
func (c *c{{$structName}}) Update(ctx context.Context, req *{{.table.ApiFile}}.{{$structName}}UpdateReq) (res *{{.table.ApiFile}}.{{$structName}}UpdateRes, err error) {
    err = service.{{$structName}}().Update(ctx, model.SysUserUpdateInput{
        {{range $index, $field := .table.Fields}}
        {{if and (eq $field.IsEdit "1") (ne $field.IsIncrement "1")}}
        {{$field.GoField}}: req.{{$field.GoField}},
        {{end}}
        {{end}}
    })
    return
}

// 删除{{.table.Description}}
func (c *c{{$structName}}) Delete(ctx context.Context, req *{{.table.ApiFile}}.{{$structName}}Req) (res *{{.table.ApiFile}}.{{$structName}}DeleteRes, err error) {
    err = service.{{$structName}}().Delete(ctx, model.SysUserDeleteInput{
        {{range $index, $field := .table.Fields}}
        {{if eq $field.IsPk "1"}}
        {{$field.GoField}}Str: req.{{$field.GoField}}Str,
        {{end}}
        {{end}}
    })
    return
}